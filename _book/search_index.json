[["01-Bacterial_genome_assembly_and_annotation.html", "Bacterial genome assembly and annotation Chapter 1 Introduction", " Bacterial genome assembly and annotation Matthew R. Gemmell 2021-07-23 Chapter 1 Introduction This practical session will run you through a standard bacterial genome assembly and annotation workflow using PacBio data. The topics covered are: Setup Overview Genome assembly with Redbean (wtdbg2) Assembly assessment Polishing with arrow Circularisation with Circlator Annotation with Prokka Final report generation with MultiQC The aim of this practical is to produce a genome assembly of Eschrichia coli, annotate it, and produce a report with the assemblys stats. Read QC will be skipped as this has been covered in a previous NEOF workshop. Commands are in the following font, colour, and box.They should be run in the command line. echo &quot;This is a command example&quot; "],["02-Cluster_Introduction.html", "Chapter 2 Cluster Introduction 2.1 Logon instructions 2.2 The Terminal Window", " Chapter 2 Cluster Introduction 2.1 Logon instructions For this workshop we will be using Virtual Network Computing (VNC). Connect to the VNC with a browser by using the webVNC link you were sent. You will now be in a logged-in Linux VNC desktop. You will see something as below (there may be only one terminal which is fine). If you do not see something similar please ask for assistance. If the VNC is taking up too much/little space of your browser you can use the zoom of your browser to adjust the size. Ensure you can see one whole terminal. These instructions will not work outside of this workshop. If you would like to install your own Linux OS on your desktop or laptop we would recommend Ubuntu. The following link is a guide to install Ubuntu: https://www.ubuntu.com/download/desktop/install-ubuntu-desktop. If you use a USB you need to create a bootable USB stick. The following link will assist: https://www.ubuntu.com/download/desktop/create-a-usb-stick-on-windows 2.2 The Terminal Window In our case the terminal window looks like the picture below. We are using the terminal window as our shell to interpret our commands to the kernel. Depending on your system and preferences it may look different. Already there is useful information for us on the terminal window. nsc065: This is the login name, also known as the username. In this case nsc065 is a demonstrators account. Your screen should show a different account name which will be your username for the Linux machine/cluster you are logged into. gauss03: This is the machine name the user is logged into. ~: This represents the current directory of the user, or the directory a command was run in. In the Linux OS and others ~ is a shortcut to the users home directory. Everything after the $ is where commands are typed into the terminal. This is also referred to as the command line. To open a new terminal window, right click on the main screen, choose Applications -&gt; Shell -&gt; bash "],["03-Start.html", "Chapter 3 Setup 3.1 Workshop directory &amp; data 3.2 Conda environments", " Chapter 3 Setup 3.1 Workshop directory &amp; data Prior to starting analysis we will create a working directory. The directory ~/bacterial_assembly/standard_workflow will contain all the inputs and outputs of our analyses. #Make directory mkdir -p ~/bacterial_assembly/standard_workflow #Move into it cd ~/bacterial_assembly/standard_workflow During the workflow we will keep a tidy directory structure outputting the results form different tools into their respective directories. For the standard workflow we will be using pre QCd PacBio reads of an Escherichia coli genome. Create a directory and create a soft link (i.e. a shortcut) of the read data. #Create directory mkdir ecoli_reads #Softlink of read data ln -s /pub39/tea/nsc006/NEOF/bact_assembly/data/ecoli.fastq ecoli_reads 3.2 Conda environments Conda is a very useful tool for bioinformaticians. It allows for the creation of virtual environments so you can install different programs. This is generally easier than manually installing programs for 2 main reasons: Usually Conda will install all the dependencies a program needs. Prior to Conda it could take more than a day to install a program and all its dependencies plus the dependencies of the dependencies etc. Different programs may need different versions of the same program as a dependency (e.g. Python version 2 or version 3). Therefore installing one can break the other. Having separate Conda environments (virtual environments) can isolate clashing programs. Analogy: You can think of programs as food and environments as food storage units. You could try to shove all your food into one giant cold room but most of your food will either be too cold or too warm. Instead it would be better to have different types of food in different compartments as outlined in the below table. Storage environment Food examples Fridge Fresh vegetables, fresh meat, etc. Freezer Frozen meat, ice, etc. Pantry Canned food, jarred food, etc. Cellar Wine. Fruit bowl Fruit. As we will be using many different programs we will be using different Conda environments. To activate these environments you will be using use scripts that will activate the relevant Conda environment belonging to user nsc006 (Matthew Gemmell). Preferably during the course of this workflow you will have a terminal open for each Conda environment. It is important to make sure you are in the correct terminal/environment for each chapter. You can see what environment a terminal currently has activated by looking at the command prompt. Below we can see the command prompt shows we are in the environment called bacterial_assembly due the environment name being in the () before your login/user name. This is consistent with Conda in all systems. For your own future analysis you would use your own Conda. If you are interested please see the Conda and Mamba links in the Next steps section of the Appendix. "],["04-Overview.html", "Chapter 4 Overview", " Chapter 4 Overview "],["05-Assembly.html", "Chapter 5 Genome Assembly 5.1 Redbean 5.2 Other long read assemblers", " Chapter 5 Genome Assembly (bit of a spiel about assembly) 5.1 Redbean Redbean (AKA wtdbg2) 5.1.1 Redbean: Conda environnment &amp; directory We will use the bacterial_assembly conda environment for our Redbean assembly. . usebacterialassembly 5.1.2 Redbean: Assemble long reads wtdbg2 -x rs -g 4.6m -i ecoli_reads/ecoli.fastq -o redbean_assembly/ecoli -t 8 5.1.3 Redbean: Derive consensus wtpoa-cns -t 8 -i redbean_assembly/ecoli.ctg.lay.gz -fo redbean_assembly/ecoli.ctg.fa 5.1.4 Redbean: Bandage Visualisation (for interest about assembly graph) (view assembly graphs, why consensus is derived) gunzip files gunzip redbean_assembly/ecoli.1.dot.gz gunzip redbean_assembly/ecoli.2.dot.gz gunzip redbean_assembly/ecoli.3.dot.gz Convert .dot file into .gfa file required for Bandage. The script wtdbg2-dot2gfa.pl is found in the scripts directory of wtdbg2 which can be found at: https://github.com/ruanjue/wtdbg2/tree/master/scripts. Unfortunately this is not installed when you install wtdbg2 via conda. wtdbg2-dot2gfa.pl redbean_assembly/ecoli.1.dot &gt; redbean_assembly/ecoli.1.dot.gfa wtdbg2-dot2gfa.pl redbean_assembly/ecoli.2.dot &gt; redbean_assembly/ecoli.2.dot.gfa wtdbg2-dot2gfa.pl redbean_assembly/ecoli.3.dot &gt; redbean_assembly/ecoli.3.dot.gfa Open up Bandage GUI. Bandage File -&gt; Load Graph -&gt; Graph Drawing -&gt; Draw graph 5.2 Other long read assemblers "],["06-Genome_assessment.html", "Chapter 6 Genome assembly assessment 6.1 Assessment: Conda environnment &amp; directory 6.2 QUAST 6.3 BUSCO 6.4 CheckM 6.5 MultiQC", " Chapter 6 Genome assembly assessment 6.1 Assessment: Conda environnment &amp; directory We will use the bacterial_genome_assessment conda environment for our Redbean assembly. chos 8 . usebacterialassembly cd ~/bacterial_assembly/standard_workflow 6.2 QUAST mkdir -p quast/redbean quast -o quast/redbean redbean_assembly/ecoli.ctg.fa firefox quast/redbean/report.html 6.3 BUSCO mkdir -p busco/redbean cd busco/redbean busco --list-datasets | less -S busco -i ../../redbean_assembly/ecoli.ctg.fa -l enterobacterales_odb10 -m geno -o ecoli less ecoli/short_summary.specific.enterobacterales_obd10.ecoli.txt 6.4 CheckM cd ~/bacterial_assembly/standard_workflow mkdir -p checkm/redbean/ecoli checkm lineage_wf --tab_table -f checkm/ecoli_checkm.tsv -t 8 -x ctg.fa redbean_assembly/ checkm/redbean/ecoli less -S checkm/redbean/ecoli/ecoli_checkm.tsv 6.5 MultiQC mkdir -p multiqc/redbean/ecoli/input ln -s quast/redbean/report.tsv multiqc/redbean/ecoli/input ln -s busco/redbean/ecoli/short_summary.specific.enterobacterales_odb10.ecoli.txt\\ multiqc/redbean/ecoli/input multiqc --outdir multiqc/redbean/ecoli/input multiqc/redbean/ecoli firefox multiqc/redbean/ecoli/multiqc_report.html MultiQC modules: https://multiqc.info/docs/#multiqc-modules "],["07-Polishing.html", "Chapter 7 Polishing", " Chapter 7 Polishing "],["08-Circlator.html", "Chapter 8 Circlator", " Chapter 8 Circlator "],["09-Annotation.html", "Chapter 9 Annotation", " Chapter 9 Annotation "],["10-Final_report.html", "Chapter 10 Final report", " Chapter 10 Final report "],["11-Appendix.html", "A Next steps B Manuals C Obtaining Read Data", " A Next steps Below are some good links to start with before carrying out your own projects. (Conda and Mamba) https://github.com/mamba-org/mamba B Manuals Conda: https://conda.io/projects/conda/en/latest/user-guide/getting-started.html FastQC: https://www.bioinformatics.babraham.ac.uk/projects/fastqc/ MultiQC: https://multiqc.info/ Trim Galore: https://www.bioinformatics.babraham.ac.uk/projects/trim_galore/ Bowtie2: http://bowtie-bio.sourceforge.net/bowtie2/manual.shtml samtools: http://www.htslib.org/ BBTools: https://jgi.doe.gov/data-and-tools/bbtools/ Kraken2: https://github.com/DerrickWood/kraken2/wiki/Manual Krona: https://github.com/marbl/Krona/wiki/KronaTools Bracken: https://ccb.jhu.edu/software/bracken/index.shtml?t=manual LEfSe: https://huttenhower.sph.harvard.edu/lefse/ HUMAnN2: https://github.com/biobakery/biobakery/wiki/humann2 MetaPhlAn2: https://huttenhower.sph.harvard.edu/metaphlan2/ Biobakery: https://github.com/biobakery/biobakery MegaHit: https://github.com/voutcn/megahit BWA: https://github.com/lh3/bwa minimap2: https://github.com/lh3/minimap2 MetaBAT2: https://bitbucket.org/berkeleylab/metabat/src/master/ CheckM: https://github.com/Ecogenomics/CheckM/wiki PhyloPhlAn: https://github.com/biobakery/phylophlan/wiki MetaWRAP: https://github.com/bxlab/metaWRAP Pokka: https://github.com/tseemann/prokka MinPath: https://github.com/mgtools/MinPath/blob/master/readme MetaCyc: https://metacyc.org/ C Obtaining Read Data https://github.com/PacificBiosciences/DevNet/wiki/8-plex-Ecoli-Multiplexed-Microbial-Assembly "]]
